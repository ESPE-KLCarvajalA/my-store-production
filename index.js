require('dotenv').config(); // Cargar variables de entorno
const express = require('express');
const routerApi = require('./routes');
const { logErrors, errorHandler, boomErrorHandler } = require('./middlewares/error.handler');
const setupSecurity = require('./middlewares/security'); // Seguridad

const { config } = require('./config/config'); // Importar configuraci√≥n global
const sequelize = require('./db/database'); // Importar la conexi√≥n a la base de datos

// Inicializaci√≥n de la aplicaci√≥n
const app = express();
const port = config.port;

// Middleware para parseo de JSON
app.use(express.json());

// Aplicar configuraciones de seguridad
setupSecurity(app);

// Ruta de prueba para verificar si el servidor est√° corriendo
app.get('/', (req, res) => {
  res.send('Servidor Express en ejecuci√≥n');
});

// Configurar rutas principales
routerApi(app);

// Middlewares de manejo de errores
app.use(logErrors);
app.use(boomErrorHandler);
app.use(errorHandler);

// Verificar la conexi√≥n con la base de datos antes de iniciar el servidor
sequelize
  .authenticate()
  .then(() => {
    console.log('‚úÖ Conectado a la base de datos con √©xito');
    // Iniciar el servidor solo si la base de datos est√° conectada
    app.listen(port, () => {
      console.log(`üöÄ Servidor corriendo en el puerto ${port}`);
    });
  })
  .catch((error) => {
    console.error('‚ùå Error al conectar con la base de datos:', error);
    process.exit(1); // Detiene la ejecuci√≥n si la base de datos no est√° disponible
  });
